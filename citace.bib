@article{13355040520180901,
Abstract = {It is a big concern to provide the security to computer system against the malware. Every day a millions of new malware are developed and the worse thing is that new malware are highly sophisticated which are very difficult to detect. Because the malware developers use the various obfuscation techniques to hide the actual code or the behaviour of malware. Thereby, it becomes very hard to analyze the malware for getting the useful information in order to design the malware detection system because of anti-static and anti-dynamic analysis technique (obfuscation techniques). In this paper, various malware obfuscation techniques are discussed in detail. [ABSTRACT FROM AUTHOR]},
Author = {Singh, Jagsir and Singh, Jaswinder},
ISSN = {21470030},
Journal = {International Journal of Information Security Science},
Keywords = {MALWARE, COMPUTER security, COMPUTER software, COMPUTER viruses, COMPUTER network security, Dynamic Analysis, Malware, Obfuscation Techniques, Static Analysis},
Number = {3},
Pages = {100 - 110},
Title = {Challenges of Malware Analysis: Obfuscation Techniques.},
Volume = {7},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=asn\&AN=133550405\&lang=cs\&site=eds-live},
date={2018-09-26}
}

@online{Obfuscation, 
    title={Introduction to Code Obfuscation}, 
    url={https://medium.com/better-programming/code-obfuscation-introduction-to-code-obfuscation-part-1-93a6797349b0}, 
    journal={Better Programming}, 
    author={Labs, DLT}, 
    date={2019-10-01},
    urldate = {2020-01-14}
}

@online{DataObfuscation,
title={Code Obfuscation - Part 2: Obfuscating Data Structures},
url={https://www.paladion.net/blogs/code-obfuscation-part-2-obfuscating-data-structures},
journal={Cyber Security \& Information Security Services},
publisher={Paladion},
date={2005-09-01},
urldate = {2020-01-14}
}

@article{DataObfuscation2,
Abstract = {Software obfuscation was proposed as a technique to mitigate the problem of malicious code tampering, by making code more difficult to understand and consequently more difficult to alter. In particular, "residue number coding" encodes program variables to hide their actual values, while supporting operations in the encoded domain. Some computations on encoded variables can proceed without the need to decode them back in the clear. Despite the obvious benefits of this approach, to the best of our knowledge, no implementation is available. In this paper, we describe our implementation of data obfuscation based on residue number coding. Moreover, we present an assessment of this obfuscation scheme in terms of performance overhead, when more and more program variables are subject to obfuscation.},
Author = {Biniam Fisseha Demissie, Mariano Ceccato,  Roberto Tiella},
Journal = {Software Protection},
Pages = {38},
Title = {Assessment of data obfuscation with residue number coding.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edscma\&AN=edscma.2821440\&lang=cs\&site=eds-live},
date = {2015-05-19}
}

@online{
sevagas_2014, 
title={Code segment encryption}, 
url={https://blog.sevagas.com/Code-segment-encryption}, 
publisher={Sevagas},
date={2014-03-01},
urldate = {2020-03-07}
}

@online{
    guardsquare_2019, 
    title={Code hardening (obfuscation \& encryption)}, 
    url={https://www.guardsquare.com/en/mobile-application-protection/code-hardening-obfuscation-encryption}, 
    publisher={Guardsquare}, 
    date={2019-12-06},
    urldate = {2020-03-07}
}

@online{
cyberbit_2016, 
title={Anti-VM and Anti-Sandbox Explained}, 
url={https://www.cyberbit.com/blog/endpoint-security/anti-vm-and-anti-sandbox-explained/}, 
publisher={Cyberbit}, 
date={2016-08-01},
urldate = {2020-02-07}
}

@online{
github_antivmdetection,
title={nsmfoo/antivmdetection}, 
url={https://github.com/nsmfoo/antivmdetection}, 
publisher={GitHub}, 
date = {2019-11-19},
urldate = {2019-12-10}
}

@online{
instruction_set_x86_cpuid, 
title={x86 Instruction Set Reference}, 
url={https://c9x.me/x86/html/file_module_x86_id_45.html}, 
journal={Into the Void: x86 Instruction Set Reference},
date = {2020-03-08},
urldate = {2020-03-08}
}

@Book{
sikorski2012practical,
author = {Sikorski, Michael},
title = {Practical Malware Analysis : a Hands-On Guide to Dissecting Malicious Software},
publisher = {No Starch Press},
year = {2012},
address = {San Francisco},
isbn = {978-1-59327-290-6}
}

@techreport{RFC4648,
author = {S. Josefsson},
title = {The Base16, Base32, and Base64 Data Encodings},
howpublished = {Internet Requests for Comments},
type = {RFC},
number = {4648},
year = {2006},
month = {10},
issn = {2070-1721},
publisher = {RFC Editor},
institution = {RFC Editor},
url = {http://www.rfc-editor.org/rfc/rfc4648.txt},
note = {\url{http://www.rfc-editor.org/rfc/rfc4648.txt}}
}

@article{stateOfArt1,
Abstract = {Malware detection is an indispensable factor in security of internet oriented machines. The combinations of different features are used for dynamic malware analysis. The different combinations are generated from APIs, Summary Information, DLLs and Registry Keys Changed. Cuckoo sandbox is used for dynamic malware analysis, which is customizable, and provide good accuracy. More than 2300 features are extracted from dynamic analysis of malware and 92 features are extracted statically from binary malware using PEFILE. Static features are extracted from 39000 malicious binaries and 10000 benign files. Dynamically 800 benign files and 2200 malware files are analyzed in Cuckoo Sandbox and 2300 features are extracted. The accuracy of dynamic malware analysis is 94.64\% while static analysis accuracy is 99.36\%. The dynamic malware analysis is not effective due to tricky and intelligent behaviours of malwares. The dynamic analysis has some limitations due to controlled network behavior and it ca},
Author = {Ijaz, Muhammad and Durad, Muhammad Hanif and Ismail, Maliha},
ISSN = {978-1-5386-7729-2},
Journal = {2019 16th International Bhurban Conference on Applied Sciences and Technology (IBCAST), Applied Sciences and Technology (IBCAST), 2019 16th International Bhurban Conference on},
Keywords = {Aerospace, Bioengineering, Communication, Networking and Broadcast Technologies, Computing and Processing, General Topics for Engineers, Robotics and Control Systems, Signal Processing and Analysis, Malware, Feature extraction, Machine learning, Data mining, Static analysis, Classification algorithms, Malwares, Cuckoo Sandbox, binary, static Analysis, Dynamic Analysis, Machine Learning, obfuscate, evade},
Pages = {687 - 691},
Title = {Static and Dynamic Malware Analysis Using Machine Learning.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edseee\&AN=edseee.8667136\&lang=cs\&site=eds-live},
date={2019-04-18},
}

@article{stateOfArt2,
Abstract = {With the development of malicious code engineering, new malware samples carry variability and polymorphism, which makes the malware variants show an increasingly growing trend. Traditional signature-based detection methods can hardly detect such variants so that it is significant for the cyber security field to analyze and detect large-scale malware samples by means of machine learning. Based on 65,536 malware samples, this paper proposed a classification method of malware family on the basis of static feature extraction using features from three aspects including bytecode features, assembler code features and PE features. We designed a series of experiments to test the features we chose and compared eight classifiers to find a better one. After feature selection and feature fusion processes we finally achieved an F1 score of 93.56\% by random forest classifier.},
Author = {Sun, Bowen and Li, Qi and Guo, Yanhui and Wen, Qiaokun and Lin, Xiaoxi and Liu, Wenhan},
ISSN = {978-1-5090-6352-9},
Journal = {2017 3rd IEEE International Conference on Computer and Communications (ICCC), Computer and Communications (ICCC), 2017 3rd IEEE International Conference on},
Keywords = {Communication, Networking and Broadcast Technologies, Computing and Processing, Malware, Feature extraction, Static analysis, Engines, Data mining, Databases, malware, static analysis, classification, machine learning},
Pages = {507 - 513},
Title = {Malware family classification method based on static feature extraction.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edseee\&AN=edseee.8322598\&lang=cs\&site=eds-live},
date = {2018-04-26}
}


@article{stateOfArt3,
Abstract = {This paper aims to explain static analysis techniques in detail, and to highlight the weaknesses and challenges which face it. To this end, more than 80 static analysis-based framework have been studied, and in their light, the process of detecting malicious applications has been divided into four phases that were explained in a schematic manner. Also, the features that is used in static analysis were discussed in detail by dividing it into four categories namely, Manifest-based features, code-based features, semantic features and app’s metadata-based features. Also, the challenges facing methods based on static analysis were discussed in detail. Finally, a case study was conducted to test the strength of some known commercial antivirus and one of the stat-of-art academic static analysis frameworks against obfuscation techniques used by developers of malicious applications. The results showed a significant impact on the performance of the most tested antiviruses and frameworks, which },
Author = {Bakour, Khaled and Unver, H. Murat and Ghanem, Razan},
ISSN = {978-1-5386-7893-0},
Journal = {2018 3rd International Conference on Computer Science and Engineering (UBMK), Computer Science and Engineering (UBMK), 2018 3rd International Conference on},
Keywords = {Computing and Processing, General Topics for Engineers, Signal Processing and Analysis, Android, Static analysis, obfuscation, malware detection},
Pages = {586 - 593},
Title = {The Android Malware Static Analysis: Techniques, Limitations, and Open Challenges.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edseee\&AN=edseee.8566573\&lang=cs\&site=eds-live},
date = {2018-12-10}
}

@article{stateOfArt4,
Abstract = {Malicious code is an increasingly important problem that threatens the security of computer systems. The traditional line of defense against malware is composed of malware detectors such as virus and spyware scanners. Unfortunately, both researchers and malware authors have demonstrated that these scanners, which use pattern matching to identify malware, can be easily evaded by simple code transformations. To address this shortcoming, more powerful malware detectors have been proposed. These tools rely on semantic signatures and employ static analysis techniques such as model checking and theorem proving to perform detection. While it has been shown that these systems are highly effective in identifying current malware, it is less clear how successful they would be against adversaries that take into account the novel detection mechanisms. The goal of this paper is to explore the limits of static analysis for the detection of malicious code. To this end, we present a binary obfuscation},
Author = {Moser, A. and Kruegel, C. and Kirda, E.},
ISSN = {978-0-7695-3060-4},
Journal = {Twenty-Third Annual Computer Security Applications Conference (ACSAC 2007), Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual},
Keywords = {Computing and Processing, Communication, Networking and Broadcast Technologies, Detectors, Registers, Computer security, Face detection, Application software, Pattern matching, Performance analysis, Power system modeling, Internet, Databases},
Pages = {421 - 430},
Title = {Limits of Static Analysis for Malware Detection.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edseee\&AN=edseee.4413008\&lang=cs\&site=eds-live},
date = {2008-01-02}
}


@article{stateOfArt5,
Abstract = {Anti-Malware industry faces the challenge of evaluating huge amount of data for potential malicious contents. This is due to the fact that hackers introduce polymorphism to the existing malicious groups/classes. Effective feature extraction and classification of malware data is necessary to tackle such issues. In this paper, we visualize viruses in an image as they capture minor changes while retaining a global structure. Later, we implement Principal Component Analysis (PCA) method for feature extraction. Based on extracted PCA features, we study the performance of various Artificial Neural Network (ANN) algorithms along with K-Nearest Neighbors (kNN) and Support Vector Machine (SVM) classification techniques for identification of malware data into their respective classes. We use k-fold validation to gauge the effectiveness of our approach. The study makes use of the publicly available Kaggle database provided by Microsoft for the Microsoft Malware Classification Challenge (BIG 2015},
Author = {Narayanan, Barath Narayanan and Djaneye-Boundjou, Ouboti and Kebede, Temesguen M.},
ISSN = {978-1-5090-3441-3},
Journal = {2016 IEEE National Aerospace and Electronics Conference (NAECON) and Ohio Innovation Summit (OIS), Aerospace and Electronics Conference (NAECON) and Ohio Innovation Summit (OIS), 2016 IEEE National},
Keywords = {Aerospace, Components, Circuits, Devices and Systems, Photonics and Electrooptics, Robotics and Control Systems, Malware, Training, Principal component analysis, Support vector machines, Artificial neural networks, Feature extraction, Data visualization, Neural Network, Malware Detection, Principle Component Analysis, Support Vector Machine, K-Nearest Neighbors},
Pages = {338 - 342},
Title = {Performance analysis of machine learning and pattern recognition algorithms for Malware classification.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edseee\&AN=edseee.7856826\&lang=cs\&site=eds-live},
date = {2017-02-16}
}

@article{stateOfArt6,
Abstract = {Computer infections such as viruses and worms spread over networks of contacts between computers, with different types of networks being exploited by different types of infections. Here we analyze the structures of several of these networks, exploring their implications for modes of spread and the control of infection. We argue that vaccination strategies that focus on a limited number of network nodes, whether targeted or randomly chosen, are in many cases unlikely to be effective. An alternative dynamic mechanism for the control of contagion, called throttling, is introduced and argued to be effective under a range of conditions.},
Author = {J. Balthrop and S. Forrest and M. Newman and M. Williamson },
Keywords = {Computer Science - Networking and Internet Architecture, Computer Science - Computers and Society},
Title = {Technological networks and the spread of computer viruses.},
URL = {http://search.ebscohost.com/login.aspx?direct=true\&db=edsarx\&AN=edsarx.cs\%2f0407048\&lang=cs\&site=eds-live},
date= {2004-04-23},
}

@article{stateOfArt7,
doi = {10.4236/jis.2014.52006},
url = {https://doi.org/10.4236/jis.2014.52006},
date= {2014-04-28},
publisher = {Scientific Research Publishing,  Inc, },
volume = {05},
number = {02},
pages = {56--64},
author = {Ekta Gandotra and Divya Bansal and Sanjeev Sofat},
title = {Malware Analysis and Classification: A Survey},
journal = {Journal of Information Security}
}

@misc{
kpb_ochodkova2019,
title={Kryptografie a počítačová bezpečnost - Klasické algortimy - pokračování},
author={Ochodková, Eliška},
date={2019-02-28}
}

@patent{
golchikov_2002,
place={English},
title={Executable file protection},
number={US 2002/0112158 A1},
author={Golchikov, Andrey Vladimirovich},
date={2002-08-15}
}

@online{
file_signatures_2020,
title = {List of file signatures},
subtitle = {Wikipedia, The Free Encyclopedia},
publisher = {San Francisco (CA): Wikimedia Foundation, 2001-},
url = {https://en.wikipedia.org/wiki/List_of_file_signatures},
date = {2020-03-23},
urldate = {2020-03-23}
}

@online{
virustotal_howitworks,
title = {How it works},
url={https://support.virustotal.com/hc/en-us/articles/115002126889-How-it-works},
publisher={VirusTotal},
date = {2020-03-03},
urldate = {2020-03-03}
}

@book{monnappaka2018,
Author = {Monnappa K A},
title = {Learning Malware Analysis: Explore the concepts, tools, and techniques to analyze and investigate Windows malware},
description = {Learning Malware Analysis: Explore the concepts, tools, and techniques to analyze and investigate Windows malware (Book, 2018)},
publisher = {Packt Publishing},
interhash = {a5aa3148115190b8c8bb62c86d1b878a},
intrahash = {507d3b699ea0eb3650e862580c2eda51},
year = {2018},
month = {6},
isbn = {1788392507},
url = {https://www.xarg.org/ref/a/1788392507/}
}

@online{
malwareanalysis_digitalguardian,
title = {What is Malware Analysis? Defining and Outlining the Process of Malware Analysis},
url = {https://digitalguardian.com/blog/what-malware-analysis-defining-and-outlining-process-malware-analysis},
publisher = {Digital Guardian},
author={ZHANG, ELLEN},
date = {2017-11-13},
urldate = {2020-03-16}
}

@book{
packers_2010,
title={Packers},
url={https://gironsec.com/code/packers.pdf},
publisher={Ange Albertini},
year={2010},
pages={Google}
}

@online{
diff_packers,
url={https://reverseengineering.stackexchange.com/a/1780},
journal={Reverse Engineering Stack Exchange},
publisher = {Stack Exchange},
author = {Albertini, Ange},
date = {2014-01-02},
urldate = {2020-03-16}
}

@MISC{CVE-2004-0733,
title = {{CVE}-2004-0733},
howpublished = "Available from IBM X-Force, {CVE-ID} {CVE}-2004-0733.",
year = {2004},
url={https://exchange.xforce.ibmcloud.com/vulnerabilities/16711},
urldate = {2020-03-16}
}

@online{
deepinstrinct_antidebug,
title = {Common anti-debugging techniques in the malware landscape},
date = {2017-12-27},
url = {https://www.deepinstinct.com/2017/12/27/common-anti-debugging-techniques-in-the-malware-landscape/},
urldate = {2020-03-18}
}

@online{
msdocs_tls,
title={Thread Local Storage (TLS)},
date={2019-08-09},
publisher = {Microsoft},
url={https://docs.microsoft.com/cs-cz/cpp/parallel/thread-local-storage-tls?view=vs-2019},
urldate={2020-03-18}
}

@online{
debugger_dissasembler,
title = {Cracking – 2. část},
journal={programujte.com},
url = {http://programujte.com/clanek/2006080803-cracking-2-cast/},
date = {2006-08-23},
urldate={2020-03-18}
}

@online{
ollydbg,
title = {OllyDbg},
url = {http://www.ollydbg.de/},
date = {2014-02-05},
urldate={2020-03-18}
}

@online{
chip_sysinternals,
title = {Windows Sysinternals},
url = {https://www.chip.cz/casopis-chip/01-2017/windows-sysinternals/},
date = {2017-01-01},
urldate = {2020-03-18}
}

@online{
ms_sysinternals,
title = {Windows Sysinternals},
url = {https://docs.microsoft.com/en-us/sysinternals/},
publisher = {Microsoft},
date = {2019-11-12},
urldate={2020-03-18}
}

@online{
depedencywalker,
title = {Dependency Walker 2.2},
url = {http://www.dependencywalker.com/},
publisher={Dependency Walker},
date = {2015-10-29},
urldate={2020-03-18}
}

@online{
hexeditors,
title = { 6 HEX Editors for Malware Analysis },
url = "https://www.sans.org/blog/6-hex-editors-for-malware-analysis/",
date = {2010-09-29},
urldate={2020-03-18}
}

@online{
executable_lifewire,
title = {List of Executable File Extensions},
url = "https://www.lifewire.com/list-of-executable-file-extensions-2626061",
date = {2019-11-14},
urldate={2020-03-20}
}

@online{
wiki:Comparison_of_executable_file_formats,
author = "Wikipedia",
title = "{Comparison of executable file formats} --- {W}ikipedia{,} The Free Encyclopedia",
url = {http://en.wikipedia.org/w/index.php?title=Comparison\%20of\%20executable\%20file\%20formats&oldid=914596333},
date={2019-09-08},
urldate={2020-03-20}
}

@online{
wiki:Executable,
author = "Wikipedia",
title = "{Executable} --- {W}ikipedia{,} The Free Encyclopedia",
url = {https://en.wikipedia.org/wiki/Executable},
date={2020-02-26},
urldate={2020-03-20}
}

@online{
pe_format_history,
author = "Johannes Plachy",
title = {Portable Executable File Format},
url = {https://blog.kowalczyk.info/articles/pefileformat.html},
date={2018-07-27},
urldate={2020-03-20}
}

@inproceedings{Liao2012PEHeaderBasedMS,
title={PE-Header-Based Malware Study and Detection},
author={Yibin Liao},
year={2012}
}

@article{Zatloukal2017MalwareDB,
title={Malware Detection Based on Multiple PE Headers Identification and Optimization for Specific Types of Files},
author={Filip Zatloukal and Jiř{\'i} Znoj},
journal={J. Adv. Eng. Comput.},
year={2017},
volume={1},
pages={153-161}
}

@online{
msdocs_pe,
title={PE Format},
date={2019-08-26},
url = {https://docs.microsoft.com/en-us/windows/win32/debug/pe-format},
urldate={2020-03-18}
}

@online{
infosecinstitute_pe,
title={Malware Researcher’s Handbook (Demystifying PE File)},
author = {Revers3r},
date={2015-11-24},
url = {https://resources.infosecinstitute.com/2-malware-researchers-handbook-demystifying-pe-file/#gref},
urldate={2020-03-22}
}

@INPROCEEDINGS{4654055,
author={Y. {Choi} and I. {Kim} and J. {Oh} and J. {Ryou}},
booktitle={International Symposium on Computer Science and its Applications},
title={PE File Header Analysis-Based Packed PE File Detection Technique (PHAD)},
year={2008},
pages={28-31},
keywords={cryptography;invasive software;PE file header analysis;packed PE file detection technique;malware detection;encryption techniques;packing techniques;characteristic vector;Euclidean distance;Cryptography;Euclidean distance;Entropy;Internet;Distance measurement;Conferences;Security;Pack;detector;PE header},
doi={10.1109/CSA.2008.28},
ISSN={2159-7049},
month={10}
}

@online{
peid_info,
title = {PE iDentifier (PEiD) 0.95},
author = {Tuts 4 You},
date={2008-10-26},    
url = {https://tuts4you.com/e107_plugins/download/download.php?view.398},
urldate={2020-03-22}
}


@online{
exeinfo,
title = {xeinfo PE by A.S.L - compression detector and data detector},
author = {A.S.L},
date={2020-02-15},    
url = {http://www.exeinfo.xn.pl/},
urldate={2020-03-22}
}


@online{
exeinfo_malwarebytes,
title = {Five PE Analysis Tools Worth Looking At},
author = {Joshua Cannell},
date={2016-03-31},    
url = {https://blog.malwarebytes.com/threat-analysis/2014/05/five-pe-analysis-tools-worth-looking-at/},
urldate={2020-03-22}
}

@online{
pestudio,
title = {pestudio},
subtitle = {Malware Initial Assessment},
author = {Marc Ochsenmeier},
url = {https://www.winitor.com/index.html},
date={2020-03-01},
urldate={2020-03-22}
}

@online{
magic_number,
title = {Portable Executable File},
author = {MalBot},
date={2019-09-15},
urldate={2020-03-22},
url = {https://malware.news/t/portable-executable-file/32980}
}

@online{
    packers-malwarbytes,
    title = {Explained: Packer, Crypter, and Protector},
    author = {Pieter Arntz},
    url = {https://blog.malwarebytes.com/cybercrime/malware/2017/03/explained-packer-crypter-and-protector/},
    date={2017-03-27},
    urldate={2020-03-22},
}

@online{
    kaspersky_malware_classification,
    title = {Types of Malware},
    author = {Kaspersky Lab.},
    url = {https://usa.kaspersky.com/resource-center/threats/types-of-malware},
    urldate={2020-03-24},
}

@INPROCEEDINGS{6107902,
    author={J. {Gennari} and D. {French}},
    booktitle={2011 IEEE International Conference on Technologies for Homeland Security (HST)},
    title={Defining malware families based on analyst insights},
    year={2011},
    pages={396-401},
    keywords={computer viruses;malware family definition;analyst insights;malicious files;network defenders;host-based defense;threat identification;cyber attack;histograms;fuzzy hash;Bloom filters;analytic method;malicious code family;antivirus signature generation;automatic classification methods;blind classification methods;Malware;Implants;Humans;Algorithm design and analysis;Reverse engineering;Runtime},
    doi={10.1109/THS.2011.6107902},
    ISSN={null},
    month={11},
}

@Inbook{
    HoonKang2011,
    author="Hoon Kang, Brent Byung and Sinclair, Greg",
    editor="van Tilborg, Henk C. A.
    and Jajodia, Sushil",
    title="Unpacking Malware",
    bookTitle="Encyclopedia of Cryptography and Security",
    year="2011",
    publisher="Springer US",
    address="Boston, MA",
    pages="1350--1351",
    isbn="978-1-4419-5906-5",
    doi="10.1007/978-1-4419-5906-5_851",
    url="https://doi.org/10.1007/978-1-4419-5906-5_851"
}

@ARTICLE{
    4639028,
	author={W. {Yan} and Z. {Zhang} and N. {Ansari}},
	journal={IEEE Security Privacy},
	title={Revealing Packed Malware},
	year={2008},
	volume={6},
	number={5},
	pages={65-69},
	abstract={To evade malicious content detection,
	malware authors use packers,
	binary tools that instigate code obfuscation. By using executable packers,
	modern malware can completely bypass personal firewalls and antivirus (AV) scanners.Reverse engineering (RE) has become an important approach to analyzing a program's logic flow and internal data structures,
	such as system call functions. Security researchers and AV products must be able to unpack and inspect the payloads hidden within the packed programs using RE tools.},
	keywords={data privacy;invasive software;reverse engineering;packed Malware;malicious content detection;code obfuscation;personal firewalls;antivirus scanners;reverse engineering;software programs;Data security;Protection;Viruses (medical);Cryptography;Space technology;Filters;Reverse engineering;Logic;Payloads;Application software;malware;packer;anti-virus;basic training},
	doi={10.1109/MSP.2008.126},
	ISSN={1558-4046},
	month={9},
}

@online{
    generic_unpacker,
    title = {Generic Unpacker of Executable Files},
    author = {Marek Milkovic},
    url = {http://excel.fit.vutbr.cz/submissions/2015/030/30.pdf}, 
    year = {2015},
    urldate={2020-03-24},
}

@online{
    dotnet_standard,
    title = {Jak na .NET Standard knihovny a generování NuGet balíčků},
    url = {https://www.miroslavholec.cz/blog/jak-na-net-standard-knihovny-a-generovani-nuget-balcku},
    author = {Miroslav Holec},
    date = {2018-05-04},
    urldate={2020-04-19}
}

@online{
    github_penet,
    title = {PeNET},
    description = {Portable Executable (PE) library written in .Net},
    url = {https://github.com/secana/PeNet},
    urldate = {2020-04-19}
}

@online{
    virustotal_about,
    title = {How it works},
    url = {https://support.virustotal.com/hc/en-us/articles/115002126889-How-it-works},
    urldate = {2020-04-19}
}

@online{
    virustotal_net_lib,
    title = {VirusTotal.NET - A full implementation of the VirusTotal 2.0 API},
    url = {https://github.com/Genbox/VirusTotalNet/},
    urldate = {2020-04-19}
}

@online{
    virustotal_yara,
    title = {Yara - The pattern matching swiss knife for malware researchers (and everyone else)},
    url = {http://virustotal.github.io/yara/},
    urldate = {2020-04-19}
}

@online{
    github_yaradotnet,
    title = {libyara.NET},
    url = {https://github.com/microsoft/libyara.NET},
    urldate = {2020-04-19}
}

@online{
    microsoft_mlnet,
    title = {ML.NET},
    url = {https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet},
    publisher = {Microsoft},
    urldate = {2020-04-25}
}

@online{
    libmagic_docs,
    title = {Guide to using filemagic},
    url = {https://filemagic.readthedocs.io/en/latest/guide.html},
    publisher = {Read the Docs, Inc.},
    urldate = {2020-04-25}
}

@online{
    libmagic_net,
    title = {Mime},
    url = {https://github.com/hey-red/Mime},
    publisher = {Github},
    urldate = {2020-04-25}
}

@online{
    csu_internet_cesi,
    title = {Internet používá přes 80 \% obyvatel Česka},
    url = {https://www.czso.cz/csu/czso/internet-pouziva-pres-80-obyvatel-ceska},
    publisher = {Český statistický úřad},
    date = {2020-03-24},
    urldate = {2020-05-01}
}

@online{
    okd_hacknuto,
    title = {Počítače OKD napadli hackeři. Společnost přerušila těžbu ve všech dolech na Karvinsku},
    url = {https://www.irozhlas.cz/zpravy-domov/okd-hackeri-doly-karvinsko_1912231724_pj},
    date = {2019-12-23},
    author = {Nikola Kopáčová},
    publisher = {Český rozhlas},
    urldate = {2020-05-01}
}

@online{
    nemocnice_hacknuto,
    title = {Výkupné se platí, vyjde totiž levněji, říká IT expert k útoku na nemocnici},
    url = {https://www.idnes.cz/brno/zpravy/rozhovor-expert-martin-haller-hacker-kyberutok-fakultni-nemocnice-brno.A200314_061024_brno-zpravy_mos1},
    author = {Ivana Solaříková},
    publisher = {MAFRA, a. s.},
    date = {2020-03-14},
    urldate = {2020-05-01}
}

@online{
    csu_hacknuto_podniky,
    title = {S kybernetickým útokem se v roce 2018 setkaly dvě pětiny velkých firem v ČR},
    url = {https://www.czso.cz/csu/czso/s-kybernetickym-utokem-se-v-roce-2018-setkaly-dve-petiny-velkych-firem-v-cr},
    date = {2020-01-14},
    urldate = {2020-05-01},
    publisher = {Český statistický úřad},
}

@online{
    cyberrisks,
    title = {Top 10 Most Common Types of Cyber Attacks},
    url = {https://blog.netwrix.com/2018/05/15/top-10-most-common-types-of-cyber-attacks/#Birthday\%20attack},
    date = {2018-05-15},
    urldate = {2020-05-01},
    author = {Jeff Melnick},
    publisher = {Netwrix Corporation},
}

@INPROCEEDINGS{
    1425057, 
    author={M. {Christodorescu} and S. {Jha} and S. A. {Seshia} and D. {Song} and R. E. {Bryant}}, 
    booktitle={2005 IEEE Symposium on Security and Privacy (S P'05)}, 
    title={Semantics-aware malware detection}, 
    year={2005}, 
    pages={32-46}
}


@online{
    nemocnice_phishing,
    title = {Sušická nemocnice se nachytala na podvodný e-mail, přišla o půl milionu},
    url = {https://www.novinky.cz/krimi/clanek/susicka-nemocnice-se-nachytala-na-podvodny-e-mail-prisla-o-pul-milionu-40315263},
    author = {Právo},
    publisher = {Borgis, a. s.},
    date = {2020-03-02},
    urldate = {2020-05-01}
}

@online{
    antiphishing_solution,
    title = {17 Phishing Prevention Tips – Prevent Phishing Attacks, Scams and Email Threats},
    url = {https://www.phishprotection.com/content/phishing-prevention/},
    publisher = {DuoCircle LLC.},
    urldate = {2020-05-01}
}

@report{
	av_securityreport_1819,
	title = {Security report 2018/19},	
	publisher = {AV-TEST GmbH},
	year = {2019},
	url = {https://www.av-test.org/fileadmin/pdf/security_report/AV-TEST_Security_Report_2018-2019.pdf},
    urldate = {2020-05-01}
}

@online{
    Github_YaraGenerator,
    title = {yarGen},
    publisher = {Github},
    url = {https://github.com/Neo23x0/yarGen},
    urldate = {2020-04-25}
}

@online{
    entropy,
    title = {Entropy},
    publisher = {Networksims},
    author = {Bill Buchanan},
    url = {https://asecuritysite.com/encryption/ent},
    urldate = {2020-04-25}
}

@online{
    privilage_escl,
    title = {What Is Privilege Escalation and Why Is It Important?},
    url = {https://www.netsparker.com/blog/web-security/privilege-escalation/},
    date = {2019-08-02},
    urldate = {2020-04-25},
    author = {Zbigniew Banach}
}

@online{
    method_getmodulehandle,
    title = {GetModuleHandle},
    url = {https://www.aldeid.com/wiki/GetModuleHandle},
    publisher = {aldeid},
    urldate = {2020-04-25},
}

@online{
    method_dllinjection,
    title = {DLL Injection Using LoadLibrary in C},
    url = {https://arvanaghi.com/blog/dll-injection-using-loadlibrary-in-C/},
    author = {Brandon Arvanaghi},
    urldate = {2020-04-25}
}

@online{
    passmark_32_stats,
    title = {Hardware Survey - OS Marketshare},
    url = {https://www.pcbenchmarks.net/os-marketshare.html},
    publisher = {PassMark Software},
    urldate = {2020-04-25}
}

@online{
    crossvalidation,
    publisher = {Wikipedia},
    title = {{Cross-validation (statistics)} --- {W}ikipedia{,} The Free Encyclopedia},
    url = {https://en.wikipedia.org/wiki/Cross-validation_(statistics)},
    urldate = {2020-04-25},
    date = {2020-04-23}
}

@online{
    ms_mlnettraining,
    publisher = {Microsoft},
    title = {How to choose an ML.NET algorithm},
    url = {https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-choose-an-ml-net-algorithm},
    urldate = {2020-04-25},
    date = {2019-05-06}
}

@online{
    ieee_macs,
    publisher = {IEEE},
    title = {Registration Authority},
    subtitle = {Standard Group MAC Address},
    url = {https://standards.ieee.org/products-services/regauth/grpmac/index.html},
    urldate = {2020-04-25},
}

@online{
    virustotal_limit,
    publisher = {VirusTotal},
    title = {API responses},
    subtitle = {/file/scan},
    url = {https://developers.virustotal.com/reference#file-scan-upload-url},
    urldate = {2020-04-25}
}